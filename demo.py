"""
D√©monstration du framework Sitiai
"""

import numpy as np
import sitiai

print("=" * 60)
print("Bienvenue dans Sitiai!")
print("Framework Python pour cr√©er et entra√Æner des IA l√©g√®res")
print("=" * 60)

# ============================================
# DEMO 1: IA G√âN√âRATIVE - G√©n√©rateur de noms
# ============================================

print("\n\nüìù D√âMO 1: G√©n√©rateur de Noms")
print("-" * 60)

# Cr√©er une IA g√©n√©rative pour les noms
print("\n1. Cr√©ation d'une IA g√©n√©rative...")
name_ai = sitiai.create.ai('generative', mode='name_generator')
print(f"‚úì {name_ai}")

# Charger des donn√©es d'entra√Ænement
print("\n2. Chargement des donn√©es d'entra√Ænement...")
noms_francais = [
    "Clemylia", "Alexandre", "Sophie", "Marie", "Pierre",
    "Julien", "Camille", "Lucas", "Emma", "Hugo",
    "L√©a", "Thomas", "Chlo√©", "Nathan", "Manon",
    "Baptiste", "Clara", "Antoine", "Juliette", "Maxime"
]
name_ai.load_data(noms_francais)
print(f"‚úì {len(noms_francais)} noms charg√©s")

# Entra√Æner le mod√®le
print("\n3. Entra√Ænement du mod√®le...")
name_ai.train(epochs=100)
print("‚úì Entra√Ænement termin√©!")

# G√©n√©rer de nouveaux noms
print("\n4. G√©n√©ration de nouveaux noms:")
nouveaux_noms = name_ai.generate_batch(n=8, temperature=0.8)
for i, nom in enumerate(nouveaux_noms, 1):
    print(f"   {i}. {nom}")

# ============================================
# DEMO 2: IA DE PR√âDICTION LIN√âAIRE
# ============================================

print("\n\n" + "=" * 60)
print("üìä D√âMO 2: Pr√©diction Lin√©aire")
print("-" * 60)

# Cr√©er des donn√©es synth√©tiques pour la r√©gression
print("\n1. Cr√©ation de donn√©es synth√©tiques...")
np.random.seed(42)
n_samples = 200

# Relation: y = 3*x1 + 2*x2 - x3 + 5 + bruit
X_train = np.random.randn(n_samples, 3)
y_train = 3 * X_train[:, 0] + 2 * X_train[:, 1] - X_train[:, 2] + 5
y_train += np.random.randn(n_samples) * 0.5  # Ajouter du bruit

X_test = np.random.randn(50, 3)
y_test = 3 * X_test[:, 0] + 2 * X_test[:, 1] - X_test[:, 2] + 5
y_test += np.random.randn(50) * 0.5

print(f"‚úì {n_samples} √©chantillons d'entra√Ænement, 50 √©chantillons de test")

# Cr√©er une IA de pr√©diction lin√©aire
print("\n2. Cr√©ation d'une IA de pr√©diction lin√©aire...")
linear_ai = sitiai.create.ai('linear', input_size=3, output_size=1, hidden_layers=[16, 8])
print(f"‚úì {linear_ai}")

# Entra√Æner le mod√®le
print("\n3. Entra√Ænement du mod√®le (cela peut prendre quelques secondes)...")
linear_ai.train(X_train, y_train, epochs=200, learning_rate=0.01, verbose=False)
print("‚úì Entra√Ænement termin√©!")

# √âvaluer le mod√®le
print("\n4. √âvaluation sur les donn√©es de test...")
mse, r2 = linear_ai.evaluate(X_test, y_test)
print(f"   ‚Ä¢ Erreur quadratique moyenne (MSE): {mse:.4f}")
print(f"   ‚Ä¢ Score R¬≤ (coefficient de d√©termination): {r2:.4f}")

# Faire quelques pr√©dictions
print("\n5. Exemples de pr√©dictions:")
for i in range(5):
    x = X_test[i:i+1]
    pred = linear_ai.predict(x)[0, 0]
    real = y_test[i]
    print(f"   Pr√©diction: {pred:.2f} | R√©el: {real:.2f} | Erreur: {abs(pred - real):.2f}")

# ============================================
# DEMO 3: Utilisation de SitiNEUR directement
# ============================================

print("\n\n" + "=" * 60)
print("üß† D√âMO 3: Utilisation directe de SitiNEUR")
print("-" * 60)

print("\n1. Cr√©ation d'une couche de neurones...")
layer = sitiai.SitiNEUR(input_size=5, output_size=3, activation='relu')
print(f"‚úì {layer}")

print("\n2. Test de propagation avant...")
input_data = np.random.randn(2, 5)  # 2 exemples, 5 features
output = layer.forward(input_data)
print(f"   Entr√©e shape: {input_data.shape}")
print(f"   Sortie shape: {output.shape}")
print(f"   Sortie:\n{output}")

# ============================================
# DEMO 4: Sauvegarde et Chargement de Mod√®les
# ============================================

print("\n\n" + "=" * 60)
print("üíæ D√âMO 4: Sauvegarde et Chargement de Mod√®les")
print("-" * 60)

print("\n1. Sauvegarde du mod√®le lin√©aire...")
linear_ai.save_weights('demo_linear_model.npz')

print("\n2. Sauvegarde du g√©n√©rateur de noms...")
name_ai.save_weights('demo_name_generator.npz')

print("\n3. Test de chargement...")
loaded_ai = sitiai.create.ai('linear', input_size=3, output_size=1, hidden_layers=[16, 8])
loaded_ai.load_weights('demo_linear_model.npz')

# V√©rifier que √ßa fonctionne
test_pred = loaded_ai.predict(X_test[0:1])
print(f"   Pr√©diction avec mod√®le charg√©: {test_pred[0, 0]:.2f}")

# ============================================
# Conclusion
# ============================================

print("\n\n" + "=" * 60)
print("‚ú® D√©monstration termin√©e!")
print("=" * 60)
print("\nSitiai vous permet de:")
print("  ‚Ä¢ Cr√©er des IA g√©n√©ratives pour g√©n√©rer des noms, textes, etc.")
print("  ‚Ä¢ Cr√©er des IA de pr√©diction lin√©aire pour la r√©gression")
print("  ‚Ä¢ Utiliser des couches de neurones SitiNEUR facilement")
print("  ‚Ä¢ Sauvegarder et charger vos mod√®les (.npz)")
print("  ‚Ä¢ Partager vos mod√®les facilement!")
print("\nSyntaxe simple inspir√©e de PyTorch, mais plus accessible!")
print("=" * 60)
