
"""
Exemple de sauvegarde et chargement de mod√®les Sitiai
"""

import numpy as np
import sitiai

print("=" * 60)
print("Exemple: Sauvegarde et Chargement de Mod√®les")
print("=" * 60)

# ============================================
# EXEMPLE 1: Mod√®le Lin√©aire
# ============================================

print("\nüìä EXEMPLE 1: Mod√®le de R√©gression Lin√©aire")
print("-" * 60)

# Cr√©er des donn√©es
np.random.seed(42)
X_train = np.random.randn(100, 3)
y_train = 3 * X_train[:, 0] + 2 * X_train[:, 1] - X_train[:, 2] + 5 + np.random.randn(100) * 0.5

# Cr√©er et entra√Æner le mod√®le
print("\n1. Cr√©ation et entra√Ænement du mod√®le...")
ai = sitiai.create.ai('linear', input_size=3, output_size=1, hidden_layers=[16, 8])
ai.train(X_train, y_train, epochs=100, verbose=False)
print(f"‚úì Mod√®le entra√Æn√©: {ai}")

# Faire une pr√©diction avant sauvegarde
X_test = np.array([[1.0, 2.0, 0.5]])
pred_before = ai.predict(X_test)
print(f"\n2. Pr√©diction avant sauvegarde: {pred_before[0, 0]:.4f}")

# Sauvegarder le mod√®le
print("\n3. Sauvegarde du mod√®le...")
ai.save_weights('my_linear_model.npz')

# Cr√©er un nouveau mod√®le et charger les poids
print("\n4. Cr√©ation d'un nouveau mod√®le et chargement des poids...")
ai_loaded = sitiai.create.ai('linear', input_size=3, output_size=1, hidden_layers=[16, 8])
ai_loaded.load_weights('my_linear_model.npz')

# V√©rifier que les pr√©dictions sont identiques
pred_after = ai_loaded.predict(X_test)
print(f"\n5. Pr√©diction apr√®s chargement: {pred_after[0, 0]:.4f}")
print(f"   Diff√©rence: {abs(pred_before[0, 0] - pred_after[0, 0]):.10f}")

# ============================================
# EXEMPLE 2: Mod√®le G√©n√©ratif
# ============================================

print("\n\n" + "=" * 60)
print("üìù EXEMPLE 2: G√©n√©rateur de Noms")
print("-" * 60)

# Cr√©er et entra√Æner le mod√®le
print("\n1. Cr√©ation et entra√Ænement du mod√®le g√©n√©ratif...")
name_ai = sitiai.create.ai('generative', mode='name_generator')
noms = ["Alexandre", "Sophie", "Marie", "Pierre", "Julien", "Camille"]
name_ai.load_data(noms)
name_ai.train(epochs=100)
print(f"‚úì {name_ai}")

# G√©n√©rer avant sauvegarde
print("\n2. G√©n√©ration avant sauvegarde:")
names_before = name_ai.generate_batch(n=3, temperature=0.8)
for i, nom in enumerate(names_before, 1):
    print(f"   {i}. {nom}")

# Sauvegarder
print("\n3. Sauvegarde du mod√®le...")
name_ai.save_weights('name_generator.npz')

# Charger dans un nouveau mod√®le
print("\n4. Chargement dans un nouveau mod√®le...")
name_ai_loaded = sitiai.create.ai('generative')
name_ai_loaded.load_weights('name_generator.npz')

# G√©n√©rer apr√®s chargement
print("\n5. G√©n√©ration apr√®s chargement:")
names_after = name_ai_loaded.generate_batch(n=3, temperature=0.8)
for i, nom in enumerate(names_after, 1):
    print(f"   {i}. {nom}")

# ============================================
# EXEMPLE 3: Partage de Mod√®le
# ============================================

print("\n\n" + "=" * 60)
print("üåê EXEMPLE 3: Partage de Mod√®le")
print("-" * 60)

print("""
Vos mod√®les peuvent maintenant √™tre partag√©s facilement!

Exemples d'utilisation:
1. Sauvegarder localement:
   ai.save_weights('mon_modele.npz')

2. Partager sur GitHub:
   - Commitez le fichier .npz dans votre repo
   - Les utilisateurs peuvent t√©l√©charger et charger avec load_weights()

3. Publier sur un service cloud:
   - Upload le fichier .npz
   - Partagez le lien de t√©l√©chargement

4. Int√©grer dans une application:
   - Incluez le fichier .npz dans votre package
   - Chargez-le au d√©marrage de l'application

Le format .npz est compact et compatible avec NumPy!
""")

print("=" * 60)
print("‚ú® D√©monstration termin√©e!")
print("=" * 60)
